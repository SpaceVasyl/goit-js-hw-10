{"mappings":"AAEkBA,SAASC,cAAc,eAO/BC,iBAAiB,QCgBH,EAACC,EAAMC,EAAQ,OACrC,IAAmBC,EAEnB,MAAO,IAAIC,KAMTD,GAASE,aAAaF,GACtBA,EAAQG,YANS,KACfH,EAAQ,KACRF,KAAQG,EAAK,GAIcF,EAAQ,CACtC,ED3BiC,EAL7B,SAAwBK,GAC3BC,MAAM,qCAAqCD,EAAME,OAAOC,wDACvDC,MAAMC,GAAQA,EAAIC,SAClBF,MAAMG,GAIX,SAA0BA,GAClBA,EAAKC,OAAS,IAChBC,MAAM,6D,CANQC,CAAiBH,I,GANd,MEERhB,SAASC,cAAc","sources":["src/fetchCountries.js","node_modules/debouncing/index.js","src/index.js"],"sourcesContent":["import {debounce, throttle} from 'debouncing';\nconst DEBOUNCE_DELAY = 300;\nconst textInput = document.querySelector('#search-box');\n\nexport function fetchCountries(event) {\n    fetch(`https://restcountries.com/v2/name/${event.target.value}?fields=name,capital,population,flags,languages`)\n    .then((res) => res.json())\n    .then((data) => tooMuchCountries(data))\n}\ntextInput.addEventListener(\"input\", debounce(fetchCountries, DEBOUNCE_DELAY));\n\nfunction tooMuchCountries(data){\n    if (data.length > 10) {\n      alert(\"Too many matches found. Please enter a more specific name.\")\n    }\n  };","/**\n * @fileoverview Debouncing and throttling events module from the Glize library.\n *\n * @see https://google.github.io/styleguide/javascriptguide.xml\n * @see https://developers.google.com/closure/compiler/docs/js-for-compiler\n * @see https://github.com/Datamart/Glize\n * @module debouncing\n */\n\n\n/**\n * In the debouncing technique, no matter how many times the user fires the \n * event, the attached function will be executed only after the specified \n * time once the user stops firing the event.\n * \n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n * @param {!Function} func The function to execute.\n * @param {number=} timeout The timeout in milliseconds.\n * @return {!Function} Returns a function, that, as long as it continues \n *     to be invoked, will not be triggered.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @method\n */\nexport const debounce = (func, timeout=250) => {\n  let /** ?number */ timer;\n\n  return (...args) => {\n    const deferred = () => {\n      timer = null;\n      func(...args);\n    };\n\n    timer && clearTimeout(timer);\n    timer = setTimeout(deferred, timeout);\n  };\n};\n\n/**\n * Throttling is a technique in which, no matter how many times the user \n * fires the event, the attached function will be executed only once in a \n * given time interval.\n * \n * Returns a function, that, as long as it continues to be invoked, will only\n * trigger every N milliseconds.\n * @param {!Function} func The function to execute.\n * @param {number=} timeout The timeout in milliseconds.\n * @return {!Function} Returns a function, that, as long as it continues \n *     to be invoked, will only trigger every N milliseconds.\n * @method\n */\nexport const throttle = (func, timeout=250) => {\n  let /** ?number */ timer;\n\n  return (...args) => {\n    const deferred = () => {\n      timer = null;\n      func(...args);\n    };\n\n    if (!timer) timer = setTimeout(deferred, timeout);\n  };\n};\n","import './css/styles.css';\nimport {fetchCountries} from './fetchCountries.js';\n// import Notiflix from 'notiflix';\nconst output = document.querySelector(\".country-info\");\n"],"names":["document","querySelector","addEventListener","func","timeout","timer","args","clearTimeout","setTimeout","event","fetch","target","value","then","res","json","data","length","alert","$c584ef0d490f0a58$var$tooMuchCountries"],"version":3,"file":"index.246b8c23.js.map"}